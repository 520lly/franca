/*******************************************************************************
 * Copyright (c) 2013 itemis AG (http://www.itemis.de).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package org.reference

typeCollection MyTypeCollection30 {
	
	const UInt8  uint8_upperLimit = 255
	const UInt8  uint8_lowerLimit = 0
	
	const Int8  int8_upperLimit = 127
	const Int8  int8_lowerLimit = -128
	
	const UInt16  uint16_upperLimit = 65535
	const UInt16  uint16_lowerLimit = 0
	
	const Int16  int16_upperLimit = 32767
	const Int16  int16_lowerLimit = -32768
	
	const UInt32  uint32_upperLimit = 4294967295
	const UInt32  uint32_lowerLimit = 0
	
	const Int32  int32_upperLimit = 2147483647
	const Int32  int32_lowerLimit = -2147483648
	
	const UInt64  uint64_upperLimit = 18446744073709551615
	const UInt64  uint64_lowerLimit = 0
	
	const Int64  int64_upperLimit = 9223372036854775807
	const Int64  int64_lowerLimit = -9223372036854775808
	
	const UInt8  uint8_upperLimitHex = 0xFF
	const UInt8  uint8_lowerLimitHex = 0x0
	
	const UInt8  uint8_upperLimit_calculated = (uint8_upperLimit - 1 + 1) * 2 / 2 
	const UInt8  uint8_lowerLimit_calculated = (uint8_lowerLimit - 1 + 1) * 2 / 2
	
	const UInt8 validZero = 0
	
	const Integer(1,2) interval1 = 1
	const Integer(1,10) interval2 = 1
	const Integer(1,10) interval3 = 10
	const Integer(minInt, maxInt) interval4 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	const Integer(minInt, maxInt) interval5 = -1 * 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	
	const Integer(1,5) i6 = interval1 * interval2 * interval3 / 10

	const String string1 = ""
	const String sstring2 = "abc"
	
	const Boolean b1 = true
	const Boolean b2 = false
	const Boolean b3 = b1 && b2
	const Boolean b4 = b3 || b1
	const Boolean b5 = !b4
	const Boolean b6 = 47 < 11
	const Boolean b7 = uint8_upperLimit == uint8_lowerLimit
	const Boolean b8 = string1=="foo" || (uint8_upperLimit > 10 && uint8_upperLimit < 20)
	const Boolean b9 = ! (uint8_lowerLimit != -0 + 1 * (3 - 1) / 2)
	const Boolean b10 = ! ((-0 + 1) != 12345 + 0xABC)
	
	//The operators == and != are valid for Booleans and have a boolean result type
	const Boolean b11 = false == false
	const Boolean b12 = false != true
	
	//The operators == and != are valid for strings and have a boolean result type
	const Boolean boolFromString1 = "test" == "test"
	const Boolean boolFromString2 = "test" != "wrong"
	
	//Valid operators for any numbers that result in boolean values
	const Boolean comparison1 = uint8_upperLimit < uint8_upperLimit
	const Boolean comparison2 = uint8_upperLimit <= uint8_lowerLimit
	const Boolean comparison3 = int16_upperLimit > uint32_lowerLimit
	const Boolean comparison4 = int64_upperLimit >= interval1
	const Boolean comparison5 = int64_upperLimit == interval4
	const Boolean comparison6 = int64_lowerLimit != interval5
	
	//floating point constants
	const Float f1 = 1.0f
	const Float f2 = -1.0f
	const Float f3 = 1.0e3f
	const Float f4 = 1.0e-3f
	const Float f5 = -1.0e-3f
	const Float f6 = f1
//	const Float f7 = <Float> d1 //This, in general, could cause a loss of information, so it is not allowed

	//floating point constants, double sized
	const Double d1 = 1.0d
	const Double d2 = -1.0d
	const Double d3 = 1.0e3d
	const Double d4 = 1.0e-3d
	const Double d5 = -1.0e-3d
	const Double d6 = d1
	const Double d7 = <Double> f1

}