/*******************************************************************************
 * Copyright (c) 2014 itemis AG (http://www.itemis.de).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
//XPECT_SETUP org.franca.core.dsl.tests.xpect.FrancaIDLXpectTests END_SETUP 
package org.franca.core.dsl.tests.xpect

typeCollection MyTypeCollection30 {
	
	const Integer(1,3) validOne = 1 //TODO: generate a warning if the borders of a interval type of constant definitions do not match the value of that constant.
	const Integer(-3,-2) validNegativeTwo = -2
	
	//Operators that are not allowed:
	/* XPECT errors ---
	   "String is not allowed with operator +" at ""test""
	   "String is not allowed with operator +" at ""1""
	 --- */
	const String s1 = "test" + "1"
	/* XPECT errors ---
	   "String is not allowed with operator -" at ""test""
	   "String is not allowed with operator -" at ""2""
	 --- */
	const String s2 = "test" - "2"
	/* XPECT errors ---
	   "String is not allowed with operator *" at ""test""
	   "String is not allowed with operator *" at ""3""
	 --- */
	const String s3 = "test" * "3"
	/* XPECT errors ---
	   "String is not allowed with operator /" at ""test""
	   "String is not allowed with operator /" at ""4""
	 --- */
	const String s4 = "test" / "4"
	
	//XPECT errors --> "invalid type (is String, expected Boolean)" at "! "test5""
	const String s5 = ! "test5"
	/* XPECT errors ---
	   "invalid type (is String, expected Boolean)" at ""test""
	   "invalid type (is String, expected Boolean)" at ""6""
	 --- */
	const String s6 = "test" && "6"
	/* XPECT errors ---
	   "invalid type (is String, expected Boolean)" at ""test""
	   "invalid type (is String, expected Boolean)" at ""7""
	 --- */
	const String s7 = "test" || "7"
	
	//XPECT errors --> "there is no order defined between elements of type String and those of type String" at ""test" < "8""
	const String s8 = "test" < "8"
	//XPECT errors --> "there is no order defined between elements of type String and those of type String" at ""test" <= "9""
	const String s9 = "test" <= "9"
	//XPECT errors --> "there is no order defined between elements of type String and those of type String" at ""test" > "10""
	const String s10 = "test" > "10"
	//XPECT errors --> "there is no order defined between elements of type String and those of type String" at ""test" >= "11""
	const String s11 = "test" >= "11"
	
	//The operators == and != are valid for strings and have a Boolean result type
	
	//XPECT errors --> "invalid type (is Integer(5,5), expected Boolean)" at "!5"
	const Boolean boolFromIntVal1 = !5	
	/* XPECT errors ---
	   "invalid type (is Integer(5,5), expected Boolean)" at "5"
	   "invalid type (is Integer(6,6), expected Boolean)" at "6"
	 --- */
	const Boolean boolFromIntVal2 = 5 && 6	
	/* XPECT errors ---
	   "invalid type (is Integer(1,3), expected Boolean)" at "validOne"
	   "invalid type (is Integer(1,1), expected Boolean)" at "1"
	 --- */
	const Boolean boolFromIntVal3 = validOne || 1
	
	//implicit casts
	
	const Float validFloatOne = 1.0f
	//XPECT errors --> "invalid type (is Float, expected Boolean)" at "! 1.0f"
	//XPECT errors --> "invalid type (is Float, expected Boolean)" at "! 1.0f"
	const Float floatVal1 = ! 1.0f
	//XPECT errors --> "invalid type (is Float, expected Boolean)" at "!validFloatOne"
	const Float floatVal2 = !validFloatOne
	/* XPECT errors ---
	   "invalid type (is Float, expected Boolean)" at "1.0f"
	   "invalid type (is Float, expected Boolean)" at "2.0f"
	 --- */
	const Float floatVal3 = 1.0f && 2.0f
	/* XPECT errors ---
	   "invalid type (is Float, expected Boolean)" at "1.0f"
	   "invalid type (is Float, expected Boolean)" at "-2.0f"
	 --- */
	const Float floatVal4 = 1.0f || -2.0f
	
	
	const Double validDoubleOne = 1.0d
	//XPECT errors --> "invalid type (is Double, expected Boolean)" at "!1.0d"
	const Double doubleVal1 = !1.0d
	//XPECT errors --> "invalid type (is Double, expected Boolean)" at "! validDoubleOne"
	const Double doubleVal2 = ! validDoubleOne
	/* XPECT errors ---
	   "invalid type (is Double, expected Boolean)" at "1.0d"
	   "invalid type (is Double, expected Boolean)" at "2.0d"
	 --- */
	const Double doubleVal3 = 1.0d && 2.0d
	/* XPECT errors ---
	   "invalid type (is Double, expected Boolean)" at "1.0d"
	   "invalid type (is Double, expected Boolean)" at "-2.0d"
	 --- */
	const Double doubleVal4 = 1.0d || -2.0d
	
	const Boolean validFalse = false
	/* XPECT errors ---
	   "Boolean is not allowed with operator +" at "true"
	   "Boolean is not allowed with operator +" at "false"
	 --- */
	const Boolean b1 = true + false
	/* XPECT errors ---
	   "Boolean is not allowed with operator -" at "false"
	   "Boolean is not allowed with operator -" at "validFalse"
	 --- */
	const Boolean b2 = false - validFalse
	/* XPECT errors ---
	   "Boolean is not allowed with operator *" at "true"
	   "Boolean is not allowed with operator *" at "false"
	 --- */
	const Boolean b3 = true * false
	/* XPECT errors ---
	   "Boolean is not allowed with operator /" at "true"
	   "Boolean is not allowed with operator /" at "false"
	 --- */
	const Boolean b4 = true / false
	//XPECT errors --> "there is no order defined between elements of type Boolean and those of type Boolean" at "validFalse < true"
	const Boolean b5 = validFalse < true
	//XPECT errors --> "there is no order defined between elements of type Boolean and those of type Boolean" at "false <= validFalse"
	const Boolean b6 = false <= validFalse
	//XPECT errors --> "there is no order defined between elements of type Boolean and those of type Boolean" at "true >= false"
	const Boolean b7 = true >= false
	//XPECT errors --> "there is no order defined between elements of type Boolean and those of type Boolean" at "true > true"
	const Boolean b8 = true > true
	
	//The operators == and != are valid for Booleans and have a Boolean result type

}