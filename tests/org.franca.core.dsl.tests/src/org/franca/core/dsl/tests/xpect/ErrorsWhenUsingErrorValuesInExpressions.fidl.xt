//  XPECT_SETUP org.franca.core.dsl.tests.xpect.FrancaIDLXpectTests END_SETUP 
package org.franca.core.dsl.tests.xpect
typeCollection TC {
	enumeration Errors {
		Error
	}
	enumeration OtherErrors {
		OtherError
	}
}
interface InterfaceTest {
	// XPECT warnings --> "Method is not covered by contract, not needed?" at "forceEnumError"
	method forceEnumError {
		error TC.Errors
	}
	contract {
		vars {
			TC.Errors savedError;
			TC.OtherErrors otherError;
		}
			
		PSM {
			initial start
			state start {
				// XPECT errors --> "invalid type (is enumeration<Errors>, expected Boolean)" at "savedError"
				on error forceEnumError [savedError] -> start
				// XPECT errors --> "invalid type (is enumeration<Errors>, expected Boolean)" at "!savedError"
				on error forceEnumError [!savedError] -> start
				
				// XPECT errors --> "the types enumeration<Errors> and enumeration<OtherErrors> are not comparable" at "errordef.Error == TC.OtherErrors.OtherError"
				on error forceEnumError [errordef.Error == TC.OtherErrors.OtherError] -> start
				// XPECT errors --> "the types enumeration<Errors> and enumeration<OtherErrors> are not comparable" at "errordef.Error == otherError"
				on error forceEnumError [errordef.Error == otherError] -> start
				// XPECT errors --> "the types enumeration<Errors> and enumeration<OtherErrors> are not comparable" at "errorval == otherError"
				on error forceEnumError [errorval == otherError] -> start	
			}
		}
	}
}
