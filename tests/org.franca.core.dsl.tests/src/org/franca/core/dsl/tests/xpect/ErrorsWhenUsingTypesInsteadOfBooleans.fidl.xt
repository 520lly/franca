//  XPECT_SETUP org.franca.core.dsl.tests.xpect.FrancaIDLXpectTests END_SETUP 
package org.franca.core.dsl.tests.xpect
typeCollection TC {
	enumeration Errors {
		Error
	}
	enumeration OtherErrors {
		OtherError
	}
}
interface InterfaceTest {
	// XPECT warnings --> "Method is not covered by contract, not needed?" at "forceEnumError"
	method forceEnumError {
		error TC.Errors
	}
	contract {
		vars {
			TC.Errors savedError;
			TC.OtherErrors otherError;
		}
			
		PSM {
			initial start
			state start {
				// XPECT errors --> "invalid type (is enumeration 'Errors', expected boolean)" at "TC.Errors.Error"
				on error forceEnumError [TC.Errors.Error] -> start
				// XPECT errors --> "references to types are not allowed here (referencing type Errors)" at "TC.Errors"
				on error forceEnumError [TC.Errors] -> start
				// XPECT errors --> "TC is not a typed element" at "TC"
				on error forceEnumError [TC] -> start
				// XPECT errors --> "references to types are not allowed here (referencing type Errors)" at "errordef"
				on error forceEnumError [errordef] -> start

				// XPECT errors --> "invalid type (is enumeration 'Errors', expected boolean)" at "!TC.Errors.Error"
				on error forceEnumError [!TC.Errors.Error] -> start
				// XPECT errors --> "references to types are not allowed here (referencing type Errors)" at "TC.Errors"
				on error forceEnumError [!TC.Errors] -> start
				// XPECT errors --> "TC is not a typed element" at "TC"
				on error forceEnumError [!TC] -> start
				// XPECT errors --> "references to types are not allowed here (referencing type Errors)" at "errordef"
				on error forceEnumError [!errordef] -> start
								
				// XPECT errors --> "TC is not a typed element" at "TC"
				on error forceEnumError [errorval == TC] -> start
				/* XPECT errors ---
					"TC is not a typed element" at "TC"
					"references to types are not allowed here (referencing type Errors)" at "errordef"
				--- */
				on error forceEnumError [errordef == TC] -> start
				// XPECT errors --> "TC is not a typed element" at "TC"
				on error forceEnumError [errordef.Error == TC] -> start
				// XPECT errors --> "references to types are not allowed here (referencing type Errors)" at "TC.Errors"
				on error forceEnumError [errorval == TC.Errors] -> start
				// XPECT errors --> "references to types are not allowed here (referencing type Errors)" at "TC.Errors"
				on error forceEnumError [errordef.Error == TC.Errors] -> start
				// XPECT errors --> "references to types are not allowed here (referencing type OtherErrors)" at "TC.OtherErrors"
				on error forceEnumError [errorval == TC.OtherErrors] -> start
				// XPECT errors --> "references to types are not allowed here (referencing type OtherErrors)" at "TC.OtherErrors"
				on error forceEnumError [errordef.Error == TC.OtherErrors] -> start
				// XPECT errors --> "references to types are not allowed here (referencing type Errors)" at "errordef"
				on error forceEnumError [errordef == otherError] -> start
				// XPECT errors --> "references to types are not allowed here (referencing type Errors)" at "errordef"
				on error forceEnumError [errordef == savedError] -> start
				
				// this would be valid if some sort of reflection would be valid:
				/* XPECT errors ---
					"references to types are not allowed here (referencing type Errors)" at "TC.Errors"
					"references to types are not allowed here (referencing type Errors)" at "errordef"
				--- */
				on error forceEnumError [errordef == TC.Errors] -> start
				/* XPECT errors ---
					"references to types are not allowed here (referencing type OtherErrors)" at "TC.OtherErrors"
					"references to types are not allowed here (referencing type Errors)" at "errordef"
				--- */
				on error forceEnumError [errordef == TC.OtherErrors] -> start

			}
		}
	}
}
