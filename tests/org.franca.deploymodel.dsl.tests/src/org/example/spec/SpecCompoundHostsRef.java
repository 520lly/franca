/*******************************************************************************
* This file has been generated by Franca's FDeployGenerator.
* Source: deployment specification 'org.example.spec.SpecCompoundHosts'
*******************************************************************************/
package org.example.spec;

import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.example.spec.SpecCompoundHostsRef.IDataPropertyAccessor.StringProp;
import org.franca.core.franca.FArgument;
import org.franca.core.franca.FArrayType;
import org.franca.core.franca.FAttribute;
import org.franca.core.franca.FEnumerationType;
import org.franca.core.franca.FEnumerator;
import org.franca.core.franca.FField;
import org.franca.core.franca.FModelElement;
import org.franca.deploymodel.core.FDeployedInterface;
import org.franca.deploymodel.core.FDeployedTypeCollection;
import org.franca.deploymodel.core.MappingGenericPropertyAccessor;
import org.franca.deploymodel.dsl.fDeploy.FDCompoundOverwrites;
import org.franca.deploymodel.dsl.fDeploy.FDEnumValue;
import org.franca.deploymodel.dsl.fDeploy.FDEnumerationOverwrites;
import org.franca.deploymodel.dsl.fDeploy.FDField;
import org.franca.deploymodel.dsl.fDeploy.FDOverwriteElement;
import org.franca.deploymodel.dsl.fDeploy.FDTypeOverwrites;

import com.google.common.collect.Maps;

public class SpecCompoundHostsRef {

	/**
	 * Interface for data deployment properties for 'org.example.spec.SpecCompoundHosts' specification
	 * 
	 * This is the data types related part only.
	 */
	public interface IDataPropertyAccessor
	{
		public enum StringProp {
			p, q, r, s, t, u, v, w, x, y, z
		}
		public StringProp getStringProp(EObject obj);
		
		public Integer getEnumerationProp(FEnumerationType obj);

		public Integer getEnumeratorProp(FEnumerator obj);
		
		public Integer getArrayProp(FArrayType obj);
		public Integer getArrayProp(FField obj);

		public Integer getStructProp(EObject obj);
		
		public Integer getSFieldProp(FField obj);
		
		public Integer getUnionProp(EObject obj);
		
		public Integer getUFieldProp(FField obj);
		
		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context 
		 * of a Franca FField object. I.e., the FField obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FField which is the context for the accessor
		 * @return the overwrite-aware accessor
 		 */
		public IDataPropertyAccessor getOverwriteAccessor(FField obj);
	}


	/**
	 * Helper class for data-related property accessors.
	 */		
	public static class DataPropertyAccessorHelper
	{
		final private MappingGenericPropertyAccessor target;
		final private IDataPropertyAccessor owner;
		
		public DataPropertyAccessorHelper(
			MappingGenericPropertyAccessor target,
			IDataPropertyAccessor owner
		) {
			this.target = target;
			this.owner = owner;
		}
		
		public StringProp convertStringProp(String val) {
			if (val.equals("p"))
				return StringProp.p; else 
			if (val.equals("q"))
				return StringProp.q; else 
			if (val.equals("r"))
				return StringProp.r; else 
			if (val.equals("s"))
				return StringProp.s; else 
			if (val.equals("t"))
				return StringProp.t; else 
			if (val.equals("u"))
				return StringProp.u; else 
			if (val.equals("v"))
				return StringProp.v; else 
			if (val.equals("w"))
				return StringProp.w; else 
			if (val.equals("x"))
				return StringProp.x; else 
			if (val.equals("y"))
				return StringProp.y; else 
			if (val.equals("z"))
				return StringProp.z;
			return null;
		}

		protected IDataPropertyAccessor getOverwriteAccessorAux(FModelElement obj) {
			FDOverwriteElement fd = (FDOverwriteElement)target.getFDElement(obj);
			FDTypeOverwrites overwrites = fd.getOverwrites();
			if (overwrites==null)
				return owner;
			else
				return new OverwriteAccessor(overwrites, owner, target);
		}
	}

	
	/**
	 * Accessor for deployment properties for 'org.example.spec.SpecCompoundHosts' specification
	 */		
	public static class TypeCollectionPropertyAccessor implements IDataPropertyAccessor {

		final private MappingGenericPropertyAccessor target;
		private final DataPropertyAccessorHelper helper;

		public TypeCollectionPropertyAccessor(FDeployedTypeCollection target) {
			this.target = target;
			this.helper = new DataPropertyAccessorHelper(target, this);
		}
		
		@Override
		public StringProp getStringProp(EObject obj) {
			String e = target.getEnum(obj, "StringProp");
			if (e==null) return null;
			return helper.convertStringProp(e);
		}
		
		@Override
		public Integer getEnumerationProp(FEnumerationType obj) {
			return target.getInteger(obj, "EnumerationProp");
		}
		
		@Override
		public Integer getEnumeratorProp(FEnumerator obj) {
			return target.getInteger(obj, "EnumeratorProp");
		}

		@Override
		public Integer getArrayProp(FArrayType obj) {
			return target.getInteger(obj, "ArrayProp");
		}
		
		@Override
		public Integer getArrayProp(FField obj) {
			return target.getInteger(obj, "ArrayProp");
		}
		
		@Override
		public Integer getStructProp(EObject obj) {
			return target.getInteger(obj, "StructProp");
		}
		
		@Override
		public Integer getSFieldProp(FField obj) {
			return target.getInteger(obj, "SFieldProp");
		}
		
		@Override
		public Integer getUnionProp(EObject obj) {
			return target.getInteger(obj, "UnionProp");
		}
		
		@Override
		public Integer getUFieldProp(FField obj) {
			return target.getInteger(obj, "UFieldProp");
		}
		

		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	}

	
	/**
	 * Accessor for deployment properties for 'org.example.spec.SpecCompoundHosts' specification
	 */
	public static class InterfacePropertyAccessor implements IDataPropertyAccessor {

		final private MappingGenericPropertyAccessor target;
		private final DataPropertyAccessorHelper helper;

		public InterfacePropertyAccessor(FDeployedInterface target) {
			this.target = target;
			this.helper = new DataPropertyAccessorHelper(target, this);
		}
		
		@Override
		public StringProp getStringProp(EObject obj) {
			String e = target.getEnum(obj, "StringProp");
			if (e==null) return null;
			return helper.convertStringProp(e);
		}
		
		public Integer getAttributeProp(FAttribute obj) {
			return target.getInteger(obj, "AttributeProp");
		}
		
		public Integer getArgumentProp(FArgument obj) {
			return target.getInteger(obj, "ArgumentProp");
		}
		
		@Override
		public Integer getEnumerationProp(FEnumerationType obj) {
			return target.getInteger(obj, "EnumerationProp");
		}

		@Override
		public Integer getEnumeratorProp(FEnumerator obj) {
			return target.getInteger(obj, "EnumeratorProp");
		}

		@Override
		public Integer getArrayProp(FArrayType obj) {
			return target.getInteger(obj, "ArrayProp");
		}

		@Override
		public Integer getArrayProp(FField obj) {
			return target.getInteger(obj, "ArrayProp");
		}
		
		public Integer getArrayProp(FAttribute obj) {
			return target.getInteger(obj, "ArrayProp");
		}

		public Integer getArrayProp(FArgument obj) {
			return target.getInteger(obj, "ArrayProp");
		}

		@Override
		public Integer getStructProp(EObject obj) {
			return target.getInteger(obj, "StructProp");
		}
		
		@Override
		public Integer getSFieldProp(FField obj) {
			return target.getInteger(obj, "SFieldProp");
		}
		
		@Override
		public Integer getUnionProp(EObject obj) {
			return target.getInteger(obj, "UnionProp");
		}
		
		@Override
		public Integer getUFieldProp(FField obj) {
			return target.getInteger(obj, "UFieldProp");
		}
		

		public IDataPropertyAccessor getOverwriteAccessor(FAttribute obj) {
			return helper.getOverwriteAccessorAux(obj);
		}

		public IDataPropertyAccessor getOverwriteAccessor(FArgument obj) {
			return helper.getOverwriteAccessorAux(obj);
		}

		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
		
	}
	
	
	/**
	 * Accessor for getting overwritten property values.
	 */		
	public static class OverwriteAccessor implements IDataPropertyAccessor {

		private final MappingGenericPropertyAccessor target;
		private final IDataPropertyAccessor delegate;

		private final FDTypeOverwrites overwrites;
		private final Map<FField, FDField> mappedFields;
		private final Map<FEnumerator, FDEnumValue> mappedEnumerators;
		private final DataPropertyAccessorHelper helper;
		
		public OverwriteAccessor(
				FDTypeOverwrites overwrites,
				IDataPropertyAccessor delegate,
				MappingGenericPropertyAccessor genericAccessor)
		{
			this.target = genericAccessor;
			this.delegate = delegate;
			this.helper = new DataPropertyAccessorHelper(genericAccessor, this);

			this.overwrites = overwrites;
			this.mappedFields = Maps.newHashMap();
			this.mappedEnumerators = Maps.newHashMap();
			if (overwrites!=null) {
				if (overwrites instanceof FDCompoundOverwrites) {
					// build mapping for compound fields
					for(FDField f : ((FDCompoundOverwrites)overwrites).getFields()) {
						this.mappedFields.put(f.getTarget(), f);
					}
				}
				if (overwrites instanceof FDEnumerationOverwrites) {
					// build mapping for enumerators
					for(FDEnumValue e : ((FDEnumerationOverwrites)overwrites).getEnumerators()) {
						this.mappedEnumerators.put(e.getTarget(), e);
					}
				}
			}
		}
		
		@Override
		public StringProp getStringProp(EObject obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				String e = target.getEnum(fo, "StringProp");
				if (e!=null)
					return helper.convertStringProp(e);
			}
			return delegate.getStringProp(obj);
		}

		@Override
		public Integer getEnumerationProp(FEnumerationType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "EnumerationProp");
				if (v!=null)
					return v;
			}
			return delegate.getEnumerationProp(obj);
		}

		@Override
		public Integer getEnumeratorProp(FEnumerator obj) {
			// check if this enumerator is overwritten
			if (mappedEnumerators.containsKey(obj)) {
				FDEnumValue fo = mappedEnumerators.get(obj);
				Integer v = target.getInteger(fo, "EnumeratorProp");
				if (v!=null)
					return v;
			}
			return delegate.getEnumeratorProp(obj);
		}

		@Override
		public Integer getArrayProp(FArrayType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "ArrayProp");
				if (v!=null)
					return v;
			}
			return delegate.getArrayProp(obj);
		}

		@Override
		public Integer getArrayProp(FField obj) {
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "ArrayProp");
				if (v!=null)
					return v;
			}
			return delegate.getArrayProp(obj);
		}
		
		@Override
		public Integer getStructProp(EObject obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "StructProp");
				if (v!=null)
					return v;
			}
			return delegate.getStructProp(obj);
		}

		@Override
		public Integer getSFieldProp(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SFieldProp");
				if (v!=null)
					return v;
			}
			return delegate.getSFieldProp(obj);
		}
	 
		@Override
		public Integer getUnionProp(EObject obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "UnionProp");
				if (v!=null)
					return v;
			}
			return delegate.getUnionProp(obj);
		}

		@Override
		public Integer getUFieldProp(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "UFieldProp");
				if (v!=null)
					return v;
			}
			return delegate.getUFieldProp(obj);
		}
	 
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				FDTypeOverwrites overwrites = fo.getOverwrites();
				if (overwrites==null)
					return this; // TODO: correct?
				else
					// TODO: this or delegate?
					return new OverwriteAccessor(overwrites, this, target);
				
			}
			return delegate.getOverwriteAccessor(obj);
		}

	}
}
