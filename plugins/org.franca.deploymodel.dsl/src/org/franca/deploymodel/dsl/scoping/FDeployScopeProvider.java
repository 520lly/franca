/*
 * generated by Xtext
 */
package org.franca.deploymodel.dsl.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.franca.core.franca.FArgument;
import org.franca.core.franca.FArrayType;
import org.franca.core.franca.FEnumerationType;
import org.franca.core.franca.FStructType;
import org.franca.core.franca.FType;
import org.franca.deploymodel.dsl.FDModelHelper;
import org.franca.deploymodel.dsl.fDeploy.FDArgument;
import org.franca.deploymodel.dsl.fDeploy.FDArray;
import org.franca.deploymodel.dsl.fDeploy.FDAttribute;
import org.franca.deploymodel.dsl.fDeploy.FDBroadcast;
import org.franca.deploymodel.dsl.fDeploy.FDElement;
import org.franca.deploymodel.dsl.fDeploy.FDEnumType;
import org.franca.deploymodel.dsl.fDeploy.FDEnumValue;
import org.franca.deploymodel.dsl.fDeploy.FDEnumeration;
import org.franca.deploymodel.dsl.fDeploy.FDInterface;
import org.franca.deploymodel.dsl.fDeploy.FDInterfaceInstance;
import org.franca.deploymodel.dsl.fDeploy.FDMethod;
import org.franca.deploymodel.dsl.fDeploy.FDProperty;
import org.franca.deploymodel.dsl.fDeploy.FDPropertyDecl;
import org.franca.deploymodel.dsl.fDeploy.FDPropertyFlag;
import org.franca.deploymodel.dsl.fDeploy.FDProvider;
import org.franca.deploymodel.dsl.fDeploy.FDRootElement;
import org.franca.deploymodel.dsl.fDeploy.FDStruct;
import org.franca.deploymodel.dsl.fDeploy.FDStructField;
import org.franca.deploymodel.dsl.fDeploy.FDType;
import org.franca.deploymodel.dsl.fDeploy.FDTypeRef;

import com.google.common.collect.Lists;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class FDeployScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_FDAttribute_target (FDInterface ctxt, EReference ref) {
		return Scopes.scopeFor(ctxt.getTarget().getAttributes());
	}
	
	public IScope scope_FDMethod_target (FDInterface ctxt, EReference ref) {
		return Scopes.scopeFor(ctxt.getTarget().getMethods());
	}

	public IScope scope_FDBroadcast_target (FDInterface ctxt, EReference ref) {
		return Scopes.scopeFor(ctxt.getTarget().getBroadcasts());
	}

	public IScope scope_FDArray_target (FDInterface ctxt, EReference ref) {
		List<FType> items = Lists.newArrayList();
		for(FType t : ctxt.getTarget().getTypes()) {
			if (t instanceof FArrayType)
				items.add(t);
		}
		return Scopes.scopeFor(items);
	}

	public IScope scope_FDStruct_target (FDInterface ctxt, EReference ref) {
		List<FType> items = Lists.newArrayList();
		for(FType t : ctxt.getTarget().getTypes()) {
			if (t instanceof FStructType)
				items.add(t);
		}
		return Scopes.scopeFor(items);
	}

	public IScope scope_FDEnumeration_target (FDInterface ctxt, EReference ref) {
		List<FType> items = Lists.newArrayList();
		for(FType t : ctxt.getTarget().getTypes()) {
			if (t instanceof FEnumerationType)
				items.add(t);
		}
		return Scopes.scopeFor(items);
	}


	
	public IScope scope_FDArgument_target (FDMethod ctxt, EReference ref) {
		List<FArgument> args = Lists.newArrayList();
		
		// TODO: we should know if the FDArgument is 'in' or 'out' and select the
		//       corresponding target scope...
		args.addAll(ctxt.getTarget().getInArgs());
		args.addAll(ctxt.getTarget().getOutArgs());
		return Scopes.scopeFor(args);
	}

	public IScope scope_FDArgument_target (FDBroadcast ctxt, EReference ref) {
		return Scopes.scopeFor(ctxt.getTarget().getOutArgs());
	}

	public IScope scope_FDStructField_target (FDStruct ctxt, EReference ref) {
		return Scopes.scopeFor(ctxt.getTarget().getElements());
	}

	public IScope scope_FDEnumValue_target (FDEnumeration ctxt, EReference ref) {
		return Scopes.scopeFor(ctxt.getTarget().getEnumerators());
	}

	
	// *****************************************************************************

	public IScope scope_FDProperty_decl (FDProvider owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	public IScope scope_FDProperty_decl (FDInterfaceInstance owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	public IScope scope_FDProperty_decl (FDInterface owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	public IScope scope_FDProperty_decl (FDAttribute owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	public IScope scope_FDProperty_decl (FDMethod owner, EReference ref) {
		return getPropertyDecls(owner);
	}
	
	public IScope scope_FDProperty_decl (FDBroadcast owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	public IScope scope_FDProperty_decl (FDArgument owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	public IScope scope_FDProperty_decl (FDArray owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	public IScope scope_FDProperty_decl (FDStruct owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	public IScope scope_FDProperty_decl (FDStructField owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	public IScope scope_FDProperty_decl (FDEnumeration owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	public IScope scope_FDProperty_decl (FDEnumValue owner, EReference ref) {
		return getPropertyDecls(owner);
	}

	private IScope getPropertyDecls (FDElement elem) {
		FDRootElement root = FDModelHelper.getRootElement(elem);
		List<FDPropertyDecl> decls = FDModelHelper.getAllPropertyDecls(root.getSpec(), elem);
		return Scopes.scopeFor(decls);
	}
	
	// *****************************************************************************
	
	// simple type system
	
	public IScope scope_FDEnum_value (FDPropertyFlag elem, EReference ref) {
		if (elem.getDefault()==null)
			return IScope.NULLSCOPE;
		
		FDPropertyDecl decl = (FDPropertyDecl)elem.eContainer();
		return getPropertyDeclEnumScopes(decl);
	}
	
	public IScope scope_FDEnum_value (FDProperty elem, EReference ref) {
		return getPropertyDeclEnumScopes(elem.getDecl());
	}
	
	private IScope getPropertyDeclEnumScopes (FDPropertyDecl decl) {
		FDTypeRef typeRef = decl.getType();
		if (typeRef.getComplex()!=null) {
			FDType type = typeRef.getComplex();
			if (type instanceof FDEnumType) {
				FDEnumType etype = (FDEnumType)type;
				return Scopes.scopeFor(etype.getEnumerators());
			}
		}
		return IScope.NULLSCOPE;
	}
}
