/*
 * generated by Xtext
 */
package org.franca.core.dsl;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.ui.editor.syntaxcoloring.AbstractAntlrTokenToAttributeIdMapper;
import org.franca.core.dsl.highlighting.FrancaAntlrTokenToAttributeIdMapper;
import org.franca.core.dsl.resource.FrancaCoreResourceDescriptionStrategy;
import org.franca.core.dsl.valueconverter.FrancaValueConverters;

import com.google.inject.Binder;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class FrancaIDLRuntimeModule extends org.franca.core.dsl.AbstractFrancaIDLRuntimeModule {

	/* (non-Javadoc)
	 * @see org.eclipse.etrice.core.AbstractRoomRuntimeModule#configureIScopeProviderDelegate(com.google.inject.Binder)
	 */
	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class).annotatedWith(
				com.google.inject.name.Names.named(org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(
						org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider.class);
		
	}

	public Class<? extends AbstractAntlrTokenToAttributeIdMapper> bindAbstractAntlrTokenToAttributeIdMapper() {
		return FrancaAntlrTokenToAttributeIdMapper.class;
	}

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return FrancaValueConverters.class;
	}
	
	public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		return FrancaCoreResourceDescriptionStrategy.class;
	}
	
}

