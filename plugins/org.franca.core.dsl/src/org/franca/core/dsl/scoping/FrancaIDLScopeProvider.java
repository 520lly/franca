/*
 * generated by Xtext
 */
package org.franca.core.dsl.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.franca.core.framework.FrancaHelpers;
import org.franca.core.franca.FState;
import org.franca.core.franca.FStateGraph;
import org.franca.core.franca.FStateTerminal;

import com.google.common.collect.Lists;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class FrancaIDLScopeProvider extends AbstractDeclarativeScopeProvider {

	/**
	 * returns a flat list of State scopes for a {@link FStateTerminal}
	 * @param st - the transition endpoint or terminal
	 * @param ref - not used
	 * @return a list of scopes
	 */
	public IScope scope_FStateTerminal_state(FStateTerminal st, EReference ref) {
		return getStateScopes(st);
	}

	
	private IScope getStateScopes(EObject obj) {
		final List<IEObjectDescription> scopes = Lists.newArrayList();

		// first state in container hierarchy
		FStateGraph parent = FrancaHelpers.getStateGraph(obj);

		// collect states of my parent
		if (parent != null) {
			for (FState s : parent.getStates()) {
				scopes.add(EObjectDescription.create(s.getName(), s));
			}
		}
		return new SimpleScope(IScope.NULLSCOPE, scopes);
	}

}
