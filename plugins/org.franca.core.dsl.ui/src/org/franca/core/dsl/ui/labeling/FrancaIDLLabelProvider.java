/*
 * generated by Xtext
 */
package org.franca.core.dsl.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.franca.core.franca.FAnnotation;
import org.franca.core.franca.FAnnotationBlock;
import org.franca.core.franca.FArgument;
import org.franca.core.franca.FAttribute;
import org.franca.core.franca.FBroadcast;
import org.franca.core.franca.FEnumerationType;
import org.franca.core.franca.FEnumerator;
import org.franca.core.franca.FField;
import org.franca.core.franca.FInterface;
import org.franca.core.franca.FMapType;
import org.franca.core.franca.FMethod;
import org.franca.core.franca.FStructType;
import org.franca.core.franca.FType;
import org.franca.core.franca.FUnionType;
import org.franca.core.franca.FVersion;
import org.franca.core.franca.Import;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class FrancaIDLLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public FrancaIDLLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	public String text(FVersion element) {
		return "v" + ((FVersion) element).getMajor() + "."
				+ ((FVersion) element).getMinor();
	}

	public String text(FAnnotationBlock element) {
		return "annotations";
	}

	public String text(FAnnotation element) {
		return ((FAnnotation) element).getType().toString()
				.replaceFirst("@", "")
				+ ":" + ((FAnnotation) element).getComment();
	}

	public String image(FInterface element) 
	{ 
		return "interface.png"; 
	}

	public String image(FAttribute element) 
	{ 
		return "attribute.gif"; 
	}

	public String image(FMethod element) 
	{ 
		return "method.gif"; 
	}
	
	public String image(FField element) 
	{ 
		return "field.gif"; 
	}

	public String image(FEnumerationType element) 
	{ 
		return "enum.gif"; 
	}

	public String image(FEnumerator element) 
	{ 
		return "enumerator.gif"; 
	}
	
	public String image(FType element) 
	{ 
		return "types.gif"; 
	}

	public String image(FStructType element) 
	{ 
		return "struct.gif"; 
	}

	public String image(FUnionType element) 
	{ 
		return "union.gif"; 
	}

	public String image(FMapType element) 
	{ 
		return "map.gif"; 
	}

	public String image(FAnnotationBlock element) 
	{ 
		return "annotation.png"; 
	}

	public String image(FVersion element) 
	{ 
		return "version.gif"; 
	}

	public String image(Import element) 
	{ 
		return "import.gif"; 
	}
	
	public String image(FBroadcast element) 
	{ 
		return "event.png"; 
	}
	
	public String image(FArgument element) 
	{
		if (element.eContainer() instanceof FBroadcast 
				|| (element.eContainer() instanceof FMethod && ((FMethod)element.eContainer()).getOutArgs().contains(element)))
		{
			return "overlay-out.gif";
		}
		else
		{
			return "overlay-in.gif";
		}
	}
}
